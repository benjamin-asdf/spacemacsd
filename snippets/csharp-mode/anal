# -*- mode: snippet -*-
#name : analyzer
#key : anal
#contributor : benj
# --
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Operations;
using Microsoft.CodeAnalysis.Diagnostics;
using System.Collections.Immutable;
using System.Collections.Generic;
using System;
using System.Linq;

[DiagnosticAnalyzer(LanguageNames.CSharp)]
public class `(file-name-base (buffer-file-name))` : GlobalAnalyzerBase {
public const string ruleId = "`(benj-roslyn-tools/get-next-analzyer-id)`";

    protected override bool logVerbose => true;

public static DiagnosticDescriptor rule = new DiagnosticDescriptor(ruleId,AnalyzerCategories.SingularityGroupCategory,DiagnosticSeverity.Error,true);

    public const string replaceNotAllowedId = "BEST070";
    // public const string compReadOnly = "BEST070";
    // public const string keyRuleId = "BEST064";

    protected override bool logVerbose => true;

    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(
        replaceNotAllowedRule
        // msgPackKeyMissingRule
        );

    public static DiagnosticDescriptor replaceNotAllowedRule = new DiagnosticDescriptor(replaceNotAllowedId,"Do not replace read-only components","{0} is read-only. Do not use Replace.",AnalyzerCategories.SingularityGroupCategory,DiagnosticSeverity.Error,true);

    // public static DiagnosticDescriptor msgPackKeyMissingRule = new DiagnosticDescriptor(keyRuleId,"Message pack key attribute missing","{0} is a MessagePackObject and {1} is missing [Key] Attribute",AnalyzerCategories.SingularityGroupCategory,DiagnosticSeverity.Error,true);


    protected override void OnInitialize(AnalysisContext context) {
        context.RegisterCompilationStartAction(compStartCtx => {
        });
    }
}

